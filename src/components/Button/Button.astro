---
import Text from '@components/Text/Text.astro'

import styles from './Button.module.css'

import type {
  ButtonSize,
  ButtonTarget,
  ButtonType,
  ButtonVariant,
} from './types'

interface Props {
  href?: string
  target?: ButtonTarget
  rel?: string
  type?: ButtonType
  disabled?: boolean
  variant?: ButtonVariant
  size?: ButtonSize
  'aria-label'?: string
  'aria-pressed'?: boolean
  'aria-expanded'?: boolean
  'aria-controls'?: string
  'data-testid'?: string
  class?: string

  [key: string]: any
}

const {
  href,
  target,
  rel,
  type = 'button',
  disabled = false,
  variant = 'primary',
  size = 'large',
  'aria-label': ariaLabel,
  'aria-pressed': ariaPressed,
  'aria-expanded': ariaExpanded,
  'aria-controls': ariaControls,
  'data-testid': dataTestId,
  class: className = '',
  ...rest
} = Astro.props

const isLink = !!href
const Tag = isLink ? 'a' : 'button'

const linkAttrs = isLink
  ? {
      href,
      target,
      rel: target === '_blank' ? 'noopener noreferrer' : rel,
    }
  : {}

const buttonAttrs = !isLink
  ? {
      type,
      disabled,
      'aria-pressed': ariaPressed,
      'aria-expanded': ariaExpanded,
      'aria-controls': ariaControls,
    }
  : {}

const buttonSize = {
  '--button-padding': size === 'small' ? '4px 10px' : '6px 12px',
}

const styleAttrs = {
  ...buttonSize,
}

const allAttrs = {
  ...linkAttrs,
  ...buttonAttrs,
  ...(disabled && { disabled }),
  ...rest,
}

const textColor = variant === 'primary' ? 'neutral-white' : 'neutral-darkest'
---

<Tag
  {...allAttrs}
  class={`${styles[`button--${variant.replace('icon', 'icon-').toLowerCase()}`]} ${className}`}
  aria-label={ariaLabel}
  data-testid={dataTestId}
  style={styleAttrs}
>
  {
    variant.includes('icon') ? (
      <slot />
    ) : (
      <Text
        variant="body-regular"
        weight={500}
        textWrap="nowrap"
        color={textColor}
      >
        <slot />
      </Text>
    )
  }
</Tag>
