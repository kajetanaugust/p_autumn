---
import type { Color, Shadow, Radius } from '@tokens/types'

import type { Overflow, Display, Wrap, Spacings } from '@utils/types'

import { getResponsiveValues } from './helpers'

import styles from './Box.module.css'

import type {
  ResponsiveAlign,
  ResponsiveDimensionVariants,
  ResponsiveDirection,
  ResponsiveGap,
  ResponsiveJustify,
  ResponsivePosition,
  ResponsivePositionProperty,
  ZIndexVariant,
} from './types'

interface Props extends Spacings {
  bgColor?: Color
  shadow?: Shadow
  position?: ResponsivePosition
  borderRadius?: Radius
  isWithBorder?: boolean
  direction?: ResponsiveDirection
  justify?: ResponsiveJustify
  align?: ResponsiveAlign
  gap?: ResponsiveGap
  width?: ResponsiveDimensionVariants
  height?: ResponsiveDimensionVariants
  maxWidth?: ResponsiveDimensionVariants
  maxHeight?: ResponsiveDimensionVariants
  zIndex?: ZIndexVariant
  top?: ResponsivePositionProperty
  right?: ResponsivePositionProperty
  bottom?: ResponsivePositionProperty
  left?: ResponsivePositionProperty
  wrap?: Wrap
  overflow?: Overflow
  display?: Display
  role?: astroHTML.JSX.HTMLAttributes['role']
  'data-testid'?: string
  class?: string
  id?: string
}

const {
  bgColor,
  shadow,
  position = 'static',
  borderRadius,
  isWithBorder = false,
  direction = 'row',
  justify = 'flex-start',
  align = 'flex-start',
  gap,
  width = '100%',
  height = 'fit-content',
  maxWidth,
  maxHeight,
  zIndex,
  top,
  right,
  bottom,
  left,
  wrap = 'nowrap',
  overflow = 'visible',
  display = 'flex',
  class: className = '',
  p,
  pb,
  ps,
  pe,
  pt,
  px,
  py,
  m,
  mx,
  my,
  mt,
  mb,
  ms,
  me,
} = Astro.props

const responsiveValues = getResponsiveValues({
  p,
  ps,
  pe,
  pt,
  pb,
  px,
  py,
  m,
  ms,
  me,
  mt,
  mb,
  mx,
  my,
  position,
  top,
  bottom,
  right,
  left,
  align,
  justify,
  wrap,
  direction,
  gap,
})

const { id, role, 'data-testid': dataTestId } = Astro.props
---

<div
  class={`${styles.box} ${className}`}
  id={id}
  role={role}
  style={{
    '--display': display,
    '--background-color': `var(--${bgColor})`,
    '--box-shadow': `var(--${shadow})`,
    '--border-radius': `var(--${borderRadius})`,
    '--border': isWithBorder && '1px solid var(--neutral-light)',
    '--width': width,
    '--height': height,
    '--max-width': maxWidth,
    '--max-height': maxHeight,
    '--z-index': zIndex,
    '--overflow': overflow,
    ...responsiveValues,
  }}
  data-testid={dataTestId}
>
  <slot />
</div>
