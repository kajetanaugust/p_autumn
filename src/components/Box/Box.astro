---
import {
    boxRecipe,
    bgColorVariants,
    shadowVariants,
    radiusVariants,
    gapVariants,
    responsiveGapStyle,
    zIndexVariants,
    paddingVariants,
    paddingXVariants,
    paddingYVariants,
    paddingTopVariants,
    paddingBottomVariants,
    paddingStartVariants,
    paddingEndVariants,
    marginVariants,
    marginXVariants,
    marginYVariants,
    marginTopVariants,
    marginBottomVariants, marginStartVariants, marginEndVariants
} from './styles.css.ts';
import type {Shadow} from "../../tokens/Shadows/types";
import type {Align, Direction, Display, Justify, Overflow, Position, Wrap} from "../../utils/types";
import type {Radius} from "../../tokens/Radius/types";
import type {Color} from "../../tokens/Colors/types";
import {theme} from "../../styles/theme.css";
import type {Spacings} from "../../utils/types";
import type {DimensionVariants, ZIndexVariant} from "./types";
import {
    getDimensionClass,
    getDimensionVars,
    getDirectionClass,
    getDirectionVars,
    getGapVars
} from "./helpers";

interface Props extends Spacings {
    bgColor?: Color;
    shadow?: Shadow;
    position?: Position;
    borderRadius?: Radius;
    isWithBorder?: boolean;
    direction?: Direction | [Direction, Direction];
    justify?: Justify;
    align?: Align;
    gap?: number | [number, number];
    width?: DimensionVariants;
    height?: DimensionVariants;
    maxWidth?: DimensionVariants;
    maxHeight?: DimensionVariants;
    zIndex?: ZIndexVariant;
    wrap?: Wrap;
    overflow?: Overflow;
    display?: Display;
    role?: astroHTML.JSX.HTMLAttributes['role'];
    'data-testid'?: string;
    class?: string;
}

const {
    bgColor,
    shadow,
    position = 'static',
    borderRadius,
    isWithBorder = false,
    direction = 'row',
    justify = 'flex-start',
    align = 'flex-start',
    gap,
    width = '100%',
    height = 'fit-content',
    maxWidth,
    maxHeight,
    zIndex,
    wrap = 'nowrap',
    overflow = 'visible',
    display = 'flex',
    class: className = '',
    p,
    pb,
    ps,
    pe,
    pt,
    px,
    py,
    m,
    mx,
    my,
    mt,
    mb,
    ms,
    me
} = Astro.props;

const recipeDirection = typeof direction === 'string' ? direction : null;
const directionClass = getDirectionClass(direction);
const directionVars = getDirectionVars(direction);

// Apply responsive gap class when gap is provided (both single number and array)
const responsiveGapClass = gap ? responsiveGapStyle : '';
const gapVars = getGapVars(gap);

const baseClass = boxRecipe({
    display,
    position,
    direction: recipeDirection,
    justify,
    align,
    wrap,
    overflow,
    isWithBorder,
});

const bgColorClass = bgColor ? bgColorVariants[bgColor] : '';
const shadowClass = shadow && shadow in shadowVariants ? shadowVariants[shadow] : '';
const radiusClass = borderRadius && typeof borderRadius === 'string' ? radiusVariants[borderRadius] : '';
const zIndexClass = zIndex ? zIndexVariants[zIndex] : '';
const paddingClass = p ? paddingVariants[p] : '';
const paddingXClass = px ? paddingXVariants[px] : '';
const paddingYClass = py ? paddingYVariants[py] : '';
const paddingTopClass = pt ? paddingTopVariants[pt] : '';
const paddingBottomClass = pb ? paddingBottomVariants[pb] : '';
const paddingStartClass = ps ? paddingStartVariants[ps] : '';
const paddingEndClass = pe ? paddingEndVariants[pe] : '';
const marginClass = m ? marginVariants[m] : '';
const marginXClass = mx ? marginXVariants[mx] : '';
const marginYClass = my ? marginYVariants[my] : '';
const marginTopClass = mt ? marginTopVariants[mt] : '';
const marginBottomClass = mb ? marginBottomVariants[mb] : '';
const marginStartClass = ms ? marginStartVariants[ms] : '';
const marginEndClass = me ? marginEndVariants[me] : '';
const widthClass = getDimensionClass(width, 'width');
const widthVars = getDimensionVars(width, 'width');
const heightClass = getDimensionClass(height, 'height');
const heightVars = getDimensionVars(height, 'height');
const maxWidthClass = maxWidth ? getDimensionClass(maxWidth, 'maxWidth') : '';
const maxWidthVars = maxWidth ? getDimensionVars(maxWidth, 'maxWidth') : '';
const maxHeightClass = maxHeight ? getDimensionClass(maxHeight, 'maxHeight') : '';
const maxHeightVars = maxHeight ? getDimensionVars(maxHeight, 'maxHeight') : {};

const allClasses = [
    baseClass,
    bgColorClass,
    shadowClass,
    radiusClass,
    responsiveGapClass,
    directionClass,
    widthClass,
    heightClass,
    maxWidthClass,
    maxHeightClass,
    zIndexClass,
    className,
    paddingClass,
    paddingXClass,
    paddingYClass,
    paddingTopClass,
    paddingBottomClass,
    paddingStartClass,
    paddingEndClass,
    marginClass,
    marginXClass,
    marginYClass,
    marginTopClass,
    marginBottomClass,
    marginStartClass,
    marginEndClass,
].filter(Boolean).join(' ');
---

<div
        class={allClasses}
        role={Astro.props.role}
        style={{...widthVars, ...heightVars, ...maxWidthVars, ...maxHeightVars, ...directionVars, ...gapVars}}
        data-testid={Astro.props['data-testid']}
>
    <slot/>
</div>
