---
import type { Color, Shadow, Radius } from '@tokens/types'

import type { Overflow, Display, Wrap, Spacings, Position } from '@utils/types'

import styles from './Box.module.css'

import type {
  DimensionVariants,
  ResponsiveAlign,
  ResponsiveDirection,
  ResponsiveGap,
  ResponsiveJustify,
  ResponsivePositionProperty,
  ZIndexVariant,
} from './types'

interface Props extends Spacings {
  bgColor?: Color
  shadow?: Shadow
  position?: Position
  borderRadius?: Radius
  isWithBorder?: boolean
  direction?: ResponsiveDirection
  justify?: ResponsiveJustify
  align?: ResponsiveAlign
  gap?: ResponsiveGap
  width?: DimensionVariants | '100vw'
  height?: DimensionVariants | '100vh'
  zIndex?: ZIndexVariant
  top?: ResponsivePositionProperty
  right?: ResponsivePositionProperty
  bottom?: ResponsivePositionProperty
  left?: ResponsivePositionProperty
  wrap?: Wrap
  overflow?: Overflow
  display?: Display
  role?: astroHTML.JSX.HTMLAttributes['role']
  'data-testid'?: string
  class?: string
  id?: string
}

const {
  bgColor,
  shadow,
  position = 'static',
  borderRadius,
  isWithBorder = false,
  direction = 'row',
  justify = 'flex-start',
  align = 'flex-start',
  gap,
  width = 'full',
  height = 'auto',
  wrap = 'nowrap',
  overflow = 'visible',
  display = 'flex',
  class: className = '',
  p,
  px,
  py,
  m,
  mx,
  my,
} = Astro.props

const { id, role, 'data-testid': dataTestId } = Astro.props

const classList = [
  Array.isArray(direction)
    ? [styles[direction[0]], styles[`${direction[1]}-md`]].join(' ')
    : styles[direction],

  Array.isArray(justify)
    ? [
        styles[`justify-${justify[0]}`],
        styles[`justify-${justify[1]}-md`],
      ].join(' ')
    : styles[`justify-${justify}`],

  Array.isArray(align)
    ? [styles[`align-${align[0]}`], styles[`align-${align[1]}-md`]].join(' ')
    : styles[`align-${align}`],

  Array.isArray(gap)
    ? [styles[`gap-${gap[0]}`], styles[`gap-${gap[1]}-md`]].join(' ')
    : gap && styles[`gap-${gap}`],

  styles[`w-${width}`],
  styles[`h-${height}`],
  bgColor && styles[`bg-${bgColor}`],
  shadow && styles[shadow],
  position && styles[`position-${position}`],
  borderRadius && styles[borderRadius],
  isWithBorder && styles['bordered'],
  wrap && styles[wrap],
  overflow && styles[overflow],
  display && styles[display],
  Array.isArray(p)
    ? [styles[`p-${p[0]}`], styles[`p-${p[1]}-md`]].join(' ')
    : p && styles[`p-${p}`],
  Array.isArray(px)
    ? [styles[`px-${px[0]}`], styles[`px-${px[1]}-md`]].join(' ')
    : px && styles[`px-${px}`],
  Array.isArray(py)
    ? [styles[`py-${py[0]}`], styles[`py-${py[1]}-md`]].join(' ')
    : py && styles[`py-${py}`],
  Array.isArray(m)
    ? [styles[`m-${m[0]}`], styles[`m-${m[1]}-md`]].join(' ')
    : m && styles[`m-${m}`],
  Array.isArray(mx)
    ? [styles[`mx-${mx[0]}`], styles[`mx-${mx[1]}-md`]].join(' ')
    : mx && styles[`mx-${mx}`],
  Array.isArray(my)
    ? [styles[`my-${my[0]}`], styles[`my-${my[1]}-md`]].join(' ')
    : my && styles[`my-${my}`],

  styles['box'],

  className,
]
  .filter(Boolean)
  .join(' ')
---

<div class={classList} id={id} role={role} data-testid={dataTestId}>
  <slot />
</div>
