---
import type { Color, Shadow, Radius } from '@tokens/types'

import type { Overflow, Display, Wrap, Spacings, Position } from '@utils/types'

import { getResponsiveProp } from './helpers'

import type {
  ResponsiveAlign,
  ResponsiveDimension,
  ResponsiveDirection,
  ResponsiveGap,
  ResponsiveJustify,
  ResponsivePositionProperty,
  ZIndexVariant,
} from './types'

interface Props extends Spacings {
  bgColor?: Color
  shadow?: Shadow
  position?: Position
  borderRadius?: Radius
  isWithBorder?: boolean
  direction?: ResponsiveDirection
  justify?: ResponsiveJustify
  align?: ResponsiveAlign
  gap?: ResponsiveGap
  width?: ResponsiveDimension
  height?: ResponsiveDimension
  zIndex?: ZIndexVariant
  top?: ResponsivePositionProperty
  right?: ResponsivePositionProperty
  bottom?: ResponsivePositionProperty
  left?: ResponsivePositionProperty
  wrap?: Wrap
  overflow?: Overflow
  display?: Display
  role?: astroHTML.JSX.HTMLAttributes['role']
  'data-testid'?: string
  class?: string
  id?: string
}

const {
  bgColor,
  shadow,
  position,
  p,
  px,
  py,
  pt,
  pr,
  pb,
  pl,
  m,
  mx,
  my,
  mt,
  mr,
  mb,
  ml,
  borderRadius,
  direction = 'row',
  justify = 'start',
  align = 'start',
  gap,
  width = 'full',
  height = 'auto',
  wrap = 'nowrap',
  overflow,
  display = 'flex',
} = Astro.props

const { id, role, 'data-testid': dataTestId } = Astro.props

const padding = (p && getResponsiveProp(p, 'p')) || []
const paddingX = (px && getResponsiveProp(px, 'px')) || []
const paddingY = (py && getResponsiveProp(py, 'py')) || []
const paddingTop = (pt && getResponsiveProp(pt, 'pt')) || []
const paddingRight = (pr && getResponsiveProp(pr, 'pr')) || []
const paddingBottom = (pb && getResponsiveProp(pb, 'pb')) || []
const paddingLeft = (pl && getResponsiveProp(pl, 'pl')) || []
const margin = (m && getResponsiveProp(m, 'm')) || []
const marginX = (mx && getResponsiveProp(mx, 'mx')) || []
const marginY = (my && getResponsiveProp(my, 'my')) || []
const marginTop = (mt && getResponsiveProp(mt, 'mt')) || []
const marginRight = (mr && getResponsiveProp(mr, 'mr')) || []
const marginBottom = (mb && getResponsiveProp(mb, 'mb')) || []
const marginLeft = (ml && getResponsiveProp(ml, 'ml')) || []
const bg = (bgColor && [`bg-${bgColor}`]) || []
const shadowValue = (shadow && [`shadow-${shadow}`]) || []
const positionValue = (position && [position]) || []
const radius = (borderRadius && [`radius-${borderRadius}`]) || []
const displayValue = (display && [display]) || []
const directionValue = (direction && getResponsiveProp(direction, 'flex')) || []
const justifyValue = (justify && getResponsiveProp(justify, 'justify')) || []
const alignValue = (align && getResponsiveProp(align, 'align')) || []
const gapValue = (gap && getResponsiveProp(gap, 'gap')) || []
const overflowValue = (overflow && [`overflow-${overflow}`]) || []
const wrapValue = (wrap && [`wrap-${wrap}`]) || []
const widthValue = (width && getResponsiveProp(width, 'w')) || []
const heightValue = (height && getResponsiveProp(height, 'h')) || []

const classList = [
  ...padding,
  ...paddingX,
  ...paddingY,
  ...paddingTop,
  ...paddingRight,
  ...paddingBottom,
  ...paddingLeft,
  ...margin,
  ...marginX,
  ...marginY,
  ...marginTop,
  ...marginRight,
  ...marginBottom,
  ...marginLeft,
  ...bg,
  ...shadowValue,
  ...positionValue,
  ...radius,
  ...displayValue,
  ...directionValue,
  ...justifyValue,
  ...alignValue,
  ...gapValue,
  ...overflowValue,
  ...wrapValue,
  ...widthValue,
  ...heightValue,
].join(' ')
---

<div class={classList} id={id} role={role} data-testid={dataTestId}>
  <slot />
</div>
