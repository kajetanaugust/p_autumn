---
import {
    boxRecipe,
    bgColorVariants,
    shadowVariants,
    radiusVariants,
    responsiveGapStyle,
    zIndexVariants
} from './styles.css.ts';
import type {Shadow} from "../../tokens/Shadows/types";
import type {Align, Direction, Display, Justify, Overflow, Position, Wrap} from "../../utils/types";
import type {Radius} from "../../tokens/Radius/types";
import type {Color} from "../../tokens/Colors/types";
import type {Spacings} from "../../utils/types";
import type {DimensionVariants, ZIndexVariant} from "./types";
import {
    getDimensionClass,
    getDimensionVars,
    getDirectionClass,
    getDirectionVars,
    getGapVars,
    getPaddingVars, getPaddingClass,
    getPaddingXVars, getPaddingXClass,
    getPaddingYVars, getPaddingYClass,
    getPaddingTopVars, getPaddingTopClass,
    getPaddingBottomVars, getPaddingBottomClass,
    getPaddingStartVars, getPaddingStartClass,
    getPaddingEndVars, getPaddingEndClass,
    getMarginVars, getMarginClass,
    getMarginXVars, getMarginXClass,
    getMarginYVars, getMarginYClass,
    getMarginTopVars, getMarginTopClass,
    getMarginBottomVars, getMarginBottomClass,
    getMarginStartVars, getMarginStartClass,
    getMarginEndVars, getMarginEndClass
} from "./helpers";

interface Props extends Spacings {
    bgColor?: Color;
    shadow?: Shadow;
    position?: Position;
    borderRadius?: Radius;
    isWithBorder?: boolean;
    direction?: Direction | [Direction, Direction];
    justify?: Justify;
    align?: Align;
    gap?: number | [number, number];
    width?: DimensionVariants;
    height?: DimensionVariants;
    maxWidth?: DimensionVariants;
    maxHeight?: DimensionVariants;
    zIndex?: ZIndexVariant;
    wrap?: Wrap;
    overflow?: Overflow;
    display?: Display;
    role?: astroHTML.JSX.HTMLAttributes['role'];
    'data-testid'?: string;
    class?: string;
}

const {
    bgColor,
    shadow,
    position = 'static',
    borderRadius,
    isWithBorder = false,
    direction = 'row',
    justify = 'flex-start',
    align = 'flex-start',
    gap,
    width = '100%',
    height = 'fit-content',
    maxWidth,
    maxHeight,
    zIndex,
    wrap = 'nowrap',
    overflow = 'visible',
    display = 'flex',
    class: className = '',
    p, pb, ps, pe, pt, px, py,
    m, mx, my, mt, mb, ms, me
} = Astro.props;

const recipeDirection = typeof direction === 'string' ? direction : null;
const directionClass = getDirectionClass(direction);
const directionVars = getDirectionVars(direction);

const responsiveGapClass = gap ? responsiveGapStyle : '';
const gapVars = getGapVars(gap);

const baseClass = boxRecipe({
    display,
    position,
    direction: recipeDirection,
    justify,
    align,
    wrap,
    overflow,
    isWithBorder,
});

const bgColorClass = bgColor ? bgColorVariants[bgColor] : '';
const shadowClass = shadow && shadow in shadowVariants ? shadowVariants[shadow] : '';
const radiusClass = borderRadius && typeof borderRadius === 'string' ? radiusVariants[borderRadius] : '';
const zIndexClass = zIndex ? zIndexVariants[zIndex] : '';

// Dimension classes and vars
const widthClass = getDimensionClass(width, 'width');
const widthVars = getDimensionVars(width, 'width');
const heightClass = getDimensionClass(height, 'height');
const heightVars = getDimensionVars(height, 'height');
const maxWidthClass = maxWidth ? getDimensionClass(maxWidth, 'maxWidth') : '';
const maxWidthVars = maxWidth ? getDimensionVars(maxWidth, 'maxWidth') : '';
const maxHeightClass = maxHeight ? getDimensionClass(maxHeight, 'maxHeight') : '';
const maxHeightVars = maxHeight ? getDimensionVars(maxHeight, 'maxHeight') : {};

// Responsive spacing classes and vars
const paddingClass = getPaddingClass(p);
const paddingVars = getPaddingVars(p);
const paddingXClass = getPaddingXClass(px);
const paddingXVars = getPaddingXVars(px);
const paddingYClass = getPaddingYClass(py);
const paddingYVars = getPaddingYVars(py);
const paddingTopClass = getPaddingTopClass(pt);
const paddingTopVars = getPaddingTopVars(pt);
const paddingBottomClass = getPaddingBottomClass(pb);
const paddingBottomVars = getPaddingBottomVars(pb);
const paddingStartClass = getPaddingStartClass(ps);
const paddingStartVars = getPaddingStartVars(ps);
const paddingEndClass = getPaddingEndClass(pe);
const paddingEndVars = getPaddingEndVars(pe);

const marginClass = getMarginClass(m);
const marginVars = getMarginVars(m);
const marginXClass = getMarginXClass(mx);
const marginXVars = getMarginXVars(mx);
const marginYClass = getMarginYClass(my);
const marginYVars = getMarginYVars(my);
const marginTopClass = getMarginTopClass(mt);
const marginTopVars = getMarginTopVars(mt);
const marginBottomClass = getMarginBottomClass(mb);
const marginBottomVars = getMarginBottomVars(mb);
const marginStartClass = getMarginStartClass(ms);
const marginStartVars = getMarginStartVars(ms);
const marginEndClass = getMarginEndClass(me);
const marginEndVars = getMarginEndVars(me);

const allClasses = [
    baseClass,
    bgColorClass,
    shadowClass,
    radiusClass,
    responsiveGapClass,
    directionClass,
    widthClass,
    heightClass,
    maxWidthClass,
    maxHeightClass,
    zIndexClass,
    className,
    paddingClass,
    paddingXClass,
    paddingYClass,
    paddingTopClass,
    paddingBottomClass,
    paddingStartClass,
    paddingEndClass,
    marginClass,
    marginXClass,
    marginYClass,
    marginTopClass,
    marginBottomClass,
    marginStartClass,
    marginEndClass,
].filter(Boolean).join(' ');

const allVars = {
    ...widthVars,
    ...heightVars,
    ...maxWidthVars,
    ...maxHeightVars,
    ...directionVars,
    ...gapVars,
    ...paddingVars,
    ...paddingXVars,
    ...paddingYVars,
    ...paddingTopVars,
    ...paddingBottomVars,
    ...paddingStartVars,
    ...paddingEndVars,
    ...marginVars,
    ...marginXVars,
    ...marginYVars,
    ...marginTopVars,
    ...marginBottomVars,
    ...marginStartVars,
    ...marginEndVars,
};
---

<div
        class={allClasses}
        role={Astro.props.role}
        style={allVars}
        data-testid={Astro.props['data-testid']}
>
    <slot/>
</div>
